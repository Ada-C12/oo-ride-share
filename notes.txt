### NOTES FOR JULIA ###
Anytime you want to see what is newly added/changed, and which wave they correspond to,
search for "###JULIA###"
########################



Comprehension Questions
Before you start writing code, you and your partner should use the above techniques and work together to answer the following questions. If you have questions or run into something that you can't figure out, consult with another group.

Classes and Relationships
What inheritance relations exist between classes?
Parent = CsvRecord
Children = Driver, Passenger, Trip
What composition relations exist between classes?
CsvRecord is 1 to many of...  Driver
Passenger
Trips
TripDispatcher is 1 to many of...  Driver
Passenger
Trips
1Driver to *Trips
*Drivers to *Passengers
1Passenger to *Trips

Do these relations match your prediction from earlier? yes...?
Draw a class diagram that contains all of the above relations.  hot air baloon


Code Details
Why doesn't Passenger or Trip need an attr_reader for id?
It's already inherited via parent CsvRecord

Why does the version of from_csv in CsvRecord raise a NotImplementedError? What does this mean? Why don't we hit that when we run the code?
We want .from_csv to be called by its children Passenger or Trip

Why is from_csv a private method?
We don't want it to be called from outside.  It should only be accessible via other methods inside.

How does CsvRecord.load_all know what CSV file to open?
B/c .load_all has args that tell it where to go
When you call Passenger.load_all, what happens? What methods are called in what order?
CsvRecord.build_path if applicable
CSV.read
.map 
Passenger.from_csv

Using the Library
Using the pry session we started above, how would you...

1. Print the rating for the first trip
#############################################
>>> pry -r './lib/trip_dispatcher.rb'
>>> allInfo = RideShare::TripDispatcher.new
# this returns a new TripDispatcher instance, with full @passengers and @trips, empty @drivers for now
#############################################

>>> trip1 = allInfo.trips[0]
>>> trip1::rating
# Cannot use trip1[:rating] b/c trip1.class is NOT hash, it's RideShare::Trip

2. Print the name of the passenger for trip 7
>>> allPassengers = allInfo.passengers
>>> allPassengers.each do |passenger|
  if passenger.id == 7
    puts passenger.name
  end
end
# the one above will print "Ginger ONdricka", followed by the entire array b/c that was returned

Instead of the loop, can do the cheapo way of...
  >>> allPassengers[6].name
  # but would be terrible if id is not incremental from 1
  
  
  3. Print the ID of every trip taken by passenger 9
  allTrips = allInfo.trips
  
  allTrips.each do |trip|
    if trip.passenger_id == 9
      puts trip.id
    end
  end
  
  => answers = 20 and 296
  
  4. Print the ID of the trip that cost the most money
  mostExpensiveTrip = allTrips.max_by do |trip|
    trip.cost
  end
  
  puts mostExpensiveTrip.id
  puts mostExpensiveTrip.cost
  
  
  ###############################################################
  WAVE 1: Extending Existing Classes
  The purpose of Wave 1 is to help you become familiar with the existing code, 
  and to practice working with enumerables.
  
  1.1: Upgrading Times
  Currently our implementation saves the start and end time of each trip as a string. 
  This is our first target for improvement. 
  Instead of storing these values as strings, we will use Ruby's built-in Time class. 
  You should:
  
  1. Spend some time reading the docs for Time - you might be particularly interested in Time.parse
  #########example#########
  time1 = "2018-12-27 02:39:05 -0800"
  time1.class => "String"
  time1Parsed = Time::parse(time1)
  time1Parsed.class => "Time"
  time1Parsed.methods => array of diff methods, like .hour or .tuesday?
  
  2. Modify Trip.from_csv to turn start_time and end_time into Time instances before passing them to Trip#initialize
  done
  
  3. Add a check in Trip#initialize that raises an ArgumentError if the end time is before the start time, and a corresponding test
  done & pushed
  
  4. Add an instance method to the Trip class to calculate the duration of the trip in seconds, and a corresponding test
  Hint: If you're hitting a NoMethodError for Time.parse, be aware that you need to require 'time' in order for it to work.
  
  1.2: Passenger Methods
  Now that we have data for trip time stored in a more convenient way, we can do some interesting data processing. Each of these should be implemented as an instance method on Passenger.
    
    Add an instance method, net_expenditures, to Passenger that will return the total amount of money that passenger has spent on their trips
    Add an instance method, total_time_spent to Passenger that will return the total amount of time that passenger has spent on their trips
    Each of these methods must have tests. What happens if the passenger has no trips?