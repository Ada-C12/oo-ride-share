### NOTES FOR JULIA ###
Anytime you want to see what is newly added/changed, and which wave they correspond to,
search for "###JULIA###"
########################



Comprehension Questions
Before you start writing code, you and your partner should use the above techniques and work together to answer the following questions. If you have questions or run into something that you can't figure out, consult with another group.

Classes and Relationships
  What inheritance relations exist between classes?
  Parent = CsvRecord
  Children = Driver, Passenger, Trip
  What composition relations exist between classes?
  CsvRecord is 1 to many of...  Driver
  Passenger
  Trips
  TripDispatcher is 1 to many of...  Driver
  Passenger
  Trips
  1Driver to *Trips
  *Drivers to *Passengers
  1Passenger to *Trips

Do these relations match your prediction from earlier? yes...?
  done! hot air baloon

Code Details
Why doesn't Passenger or Trip need an attr_reader for id?
  It's already inherited via parent CsvRecord

Why does the version of from_csv in CsvRecord raise a NotImplementedError? What does this mean? Why don't we hit that when we run the code?
  We want .from_csv to be called by its children Passenger or Trip

Why is from_csv a private method?
  We don't want it to be called from outside.  It should only be accessible via other methods inside.

How does CsvRecord.load_all know what CSV file to open?
  B/c .load_all has args that tell it where to go
When you call Passenger.load_all, what happens? What methods are called in what order?
  CsvRecord.build_path if applicable
  CSV.read
  .map 
  Passenger.from_csv

Using the Library
Using the pry session we started above, how would you...

1. Print the rating for the first trip
#############################################
>>> pry -r './lib/trip_dispatcher.rb'
>>> allInfo = RideShare::TripDispatcher.new
# this returns a new TripDispatcher instance, with full @passengers and @trips, empty @drivers for now
#############################################

>>> trip1 = allInfo.trips[0]
>>> trip1::rating
>>> trip1.rating
# either one fo the above is ok for access to rating
# Cannot use trip1[:rating] b/c trip1.class is NOT hash, it's RideShare::Trip

2. Print the name of the passenger for trip 7
>>> allPassengers = allInfo.passengers
>>> allPassengers.each do |passenger|
  if passenger.id == 7        ### JULIA ### LOL we did it wrong here, but whatever we got the right idea
    puts passenger.name
  end
end
# the one above will print "Ginger ONdricka", followed by the entire array b/c that was returned

Instead of the loop, can do the cheapo way of...
  >>> allPassengers[6].name
  # but would be terrible if id is not incremental from 1
  
3. Print the ID of every trip taken by passenger 9
  allTrips = allInfo.trips
  
  allTrips.each do |trip|
    if trip.passenger_id == 9
      puts trip.id
    end
  end
  
  => answers = 20 and 296

  ###### ANOTHER Method   ### JULIA CHECK THIS OUT! ###
  # this way is better, bc there are fewer Passenger instances to sift thru, vs 600 Trip instances
  p9 = allInfo.passengers.find {|passenger| passenger.id ==9}
  puts p9.trips

  4. Print the ID of the trip that cost the most money
  mostExpensiveTrip = allTrips.max_by do |trip|
    trip.cost
  end
  
  puts mostExpensiveTrip.id
  puts mostExpensiveTrip.cost
  
  
###############################################################
WAVE 1: Extending Existing Classes
  
1.1: Upgrading Times
  
1. Spend some time reading the docs for Time - you might be particularly interested in Time.parse
    #########example#########
    time1 = "2018-12-27 02:39:05 -0800"
    time1.class => "String"
    time1Parsed = Time::parse(time1)
    time1Parsed.class => "Time"
    time1Parsed.methods => array of diff methods, like .hour or .tuesday?
  
2. Modify Trip.from_csv to turn start_time and end_time into Time instances before passing them to Trip#initialize
  done!
  
3. Add a check in Trip#initialize that raises an ArgumentError if the end time is before the start time, and a corresponding test
  done! 
  
4. Add an instance method to the Trip class to calculate the duration of the trip in seconds, and a corresponding test
  done! 

1.2: Passenger Methods
  Now that we have data for trip time stored in a more convenient way, we can do some interesting data processing. Each of these should be implemented as an instance method on Passenger.
    
  1.Add an instance method, net_expenditures, to Passenger that will return the total amount of money that passenger has spent on their trips
    done!  

  2. Add an instance method, total_time_spent to Passenger that will return the total amount of time that passenger has spent on their trips
    done!
    
  Each of these methods must have tests. What happens if the passenger has no trips? 
    done! Accounted for in tests files :-)


###############################################################
Wave 2: Drivers
Our program needs a data type to represent Drivers in our service.

We will do this by creating a Driver class which inherits from CsvRecord, similar to Trip and Passenger. The constructor for Driver should take the following keyword arguments:

Attribute	Description	Rules
id	Unique number for this driver	Pass to the superclass constructor (similar to Passenger)
name	This driver's name	
vin	The driver's Vehicle Identification Number (VIN)	String of length 17. Raise an ArgumentError if it's the wrong length.
status	Is this Driver available to drive?	Must be one of :AVAILABLE or :UNAVAILABLE
trips	A list of trips this driver has driven	Optional, if not provided, initialize to an empty array (similar to Passenger)
  done!

Since Driver inherits from CsvRecord, you'll need to implement the from_csv template method. Once you do, Driver.load_all should work (test this in pry).
 done!

Use the provided tests to ensure that a Driver instance can be created successfully and that an ArgumentError is raised for an invalid status.
  done!

Updating Trip
To make use of the new Driver class we will need to update the Trip class to include a reference to the trip's driver. Add the following attributes to the Trip class.
  done!


Attribute	Description
driver_id	The ID of the driver for this trip
driver	The Driver instance for the trip
When a Trip is constructed, either driver_id or driver must be provided.

Note: You have changed the method signature of the constructor for Trip. 
Some of your tests may now be failing. Go fix them!
  done!

Loading Drivers
Update the TripDispatcher class as follows:

In the constructor, call Driver.load_all and save the result in an instance variable
  done!  saved in @drivers
Update the connect_trips method to connect the driver as well as the passenger
  done!
Add a find_driver method that looks up a driver by ID
  done!



Driver methods
After each Trip has a reference to its Driver and TripDispatcher can load a list of Drivers, add the following functionality to the Driver class:

Method	Description	Test Cases
add_trip	Add a trip to the driver's list of trips	Try adding a trip <- worked in pry
  done!
average_rating	What is this driver's average rating?	What if there are no trips?
  done!
Does it handle floating point division correctly? For example the average of 2 and 3 should be 2.5, not 2.
  done!
total_revenue	This method calculates that driver's total revenue across all their trips. Each driver gets 80% of the trip cost after a fee of $1.65 per trip is subtracted.	What if there are no trips?
What if the cost of a trip was less that $1.65?
  done!  

All the new methods above should have tests
  add_trip -> done!   b/c already provided
  average_rating -> done! b/c already provided
  total_revenue -> done! self-written








### LAST THING BEFORE BEING TOTALLY DONE WITH WAVE 2 ###
###JULIA & CAROLINE###  HOLD UP!  Weird bug in trip_test.rb, awaiting resolution

  

